#Title: 二叉树

二叉树是每个节点最多有两个子树的树结构，它有五种基本形态：二叉树可以是空集；根可以有空的左子树或右子树；或者左、右子树皆为空。
目标：构建二叉树，树的建立时，每个节点的Key比左子节点Key数值大，每个节点的Key比右节点Key数值小

在“TODO”处添加代码

1. 节点定义
1.1 节点定义
二叉查找树的节点包含的基本信息：
(01) key       -- 它是关键字，是用来对二叉查找树的节点进行排序的。
(02) left       -- 它指向当前节点的左孩子。
(03) right    -- 它指向当前节点的右孩子。
(04) parent -- 它指向当前节点的父结点。
1.2 创建节点
根据节点定义创建节点

2 遍历
二叉树前序遍历、中序遍历、后序遍历3种方式。
2.1 前序遍历
若二叉树非空，则执行以下操作：
(01) 访问根结点；
(02) 先序遍历左子树；
(03) 先序遍历右子树。
2.2 中序遍历
若二叉树非空，则执行以下操作：
(01) 中序遍历左子树；
(02) 访问根结点；
(03) 中序遍历右子树。
2.3 后序遍历
若二叉树非空，则执行以下操作：
(01) 后序遍历左子树；
(02) 后序遍历右子树；
(03) 访问根结点。

3. 查找
可以函数递归或者非递归的方式实现

4. 最大值和最小值
查找最大值和查找最小值

5. 前驱和后继
节点的前驱：是该节点的左子树中的最大节点。
节点的后继：是该节点的右子树中的最小节点。

6. 插入
插入节点

7. 删除
删除节点

8. 打印
打印二叉树
void print_bstree(BSTree tree, Type key, int direction);

9. 销毁二叉树
销毁二叉树

Output：
== 依次添加: 50 90 80 10 40 30 20 60
== 前序遍历: 50 10 40 30 20 90 80 60
== 中序遍历: 10 20 30 40 50 60 80 90
== 后序遍历: 20 30 40 10 60 80 90 50
== 最小值: 10
== 最大值: 90
== 树的详细信息:
50 is root
10 is 50's   left child
40 is 10's  right child
30 is 40's   left child
20 is 30's   left child
90 is 50's  right child
80 is 90's   left child
60 is 80's   left child

//////////////////////////
#NOTE:
a. compiling command: gcc multithread.c
b. running command: ./multithread
//////////////////////

